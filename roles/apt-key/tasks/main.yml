---
- ansible.builtin.tempfile: state=file
  check_mode: no
  register: apt_key_tempfile
  changed_when: false

- name: Download temp apt key {{ keyname }}
  ansible.builtin.shell:
    cmd: |-
      set -e
      if [ "{{ dearmor | default(False) }}" = "True" ]; then
        curl -fsSL -o- '{{ url }}' | gpg --dearmor -o '{{ apt_key_tempfile.path }}' --yes
      else
        curl -fsSL -o'{{ apt_key_tempfile.path }}' '{{ url }}'
      fi
  changed_when: false

- ansible.builtin.set_fact:
    apt_key_path: "{{ apt_key_keyring_path }}/{{ keyname }}"
    apt_source_text: |-
      {{ source
          | regex_replace('([ \t]+[a-z]+://)', ' [signed-by={{ apt_key_path }}]\1')
          | replace('] [signed-by=', ' signed-by=')
      }}

- ansible.builtin.set_fact:
    apt_source_text: "{{ apt_source_text | replace('{{ apt_key_path }}', apt_key_path) }}"

- stat: path="{{ apt_key_path }}"
  register: apt_key

- name: Add apt key {{ keyname }}
  ansible.builtin.copy:
    src: "{{ apt_key_tempfile.path }}"
    dest: "{{ apt_key_path }}"
    mode: 0644
  register: res
  changed_when: res.changed and not ansible_check_mode or not apt_key.stat.exists
  become: yes

- name: Delete temp apt key {{ keyname }}
  ansible.builtin.file: path="{{ apt_key_tempfile.path }}" state=absent
  changed_when: false

- name: Create apt source {{ name }}
  ansible.builtin.copy:
    dest: "/etc/apt/sources.list.d/{{ name }}.list"
    content: "{{ apt_source_text }}\n"
    mode: 0644
  become: yes
  register: apt_source

- name: Update apt cache
  ansible.builtin.shell: apt-get update -qqy
  become: yes
  changed_when: apt_source.changed
